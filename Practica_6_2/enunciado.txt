Vamos a desarrollar un proyecto que gestione los tipos de profesores de un centro educativo.

De cada profesor queremos almacenar su DNI (string), nombre y e-mail. Además,  habrá dos tipos de profesores especiales:

- Los catedráticos, a los que añadiremos como atributo el año en que fueron nombrados catedráticos
- Los profesores en prácticas, que tendrán asignado un tutor (que tendrá que ser un catedrático), y tendrán también un booleano que indicará si ha superado la fase de prácticas o no (inicialmente establecido a false).

Se pide elaborar un proyecto Visual Studio llamado GestionProfesores con las siguientes clases:

Clase padre Profesor, junto con las clases hijas (heredadas) ProfesorCatedratico y ProfesorPracticas, cada una con sus atributos respectivos, constructor parametrizado para darles valor y getters/setters (o bien propiedades get/set, si lo prefieres). Añadiremos también en cada clase una redefinición del método ToString para sacar la información de cada profesor. Esta información deberá empezar por el DNI, seguido del nombre y e-mail, y luego el resto de información específica de cada profesor. Por ejemplo, para un catedrático podría quedar así:

Profesor con DNI 11223344A, Juan Pérez Giménez, jpg@gmail.com, nombrado catedrático en 2014.

En el caso de los profesores en prácticas, deberemos mostrar su información general y sólo el DNI y nombre del tutor que les supervisa (no toda la información del tutor)

Nuestro programa principal creará un array para almacenar hasta 30 profesores, y dejaremos ya pre-añadidos algunos catedráticos. Mostraremos un menú con estas opciones:

1. Nuevo profesor: pediremos al usuario que especifique el tipo de profesor (con un código numérico que distinga el tipo de profesor) y luego le pediremos los datos de ese profesor en cuestión. Deberemos tener en cuenta lo siguiente:

- El DNI del profesor que añadamos no debe existir en el array de profesores. Si existe, mostraremos el mensaje de "El DNI ya existe" y finalizaremos el proceso.
- El año del catedrático debe ser un número válido entre 1990 y 2023 (ambos inclusive). Si no lo es lo volveremos a pedir hasta que lo sea
- En el caso de los profesores en prácticas, mostraremos un listado con el DNI y nombre de los catedráticos que haya en el array, y el usuario elegirá el tutor por el DNI. Si se equivoca o no existe se lo volveremos a pedir hasta que sea correcto.

2. Profesores tutorizados: mostraremos el listado de catedráticos existente, le pediremos al usuario que escriba un DNI y, si corresponde con un catedrático existente, mostraremos todos los funcionarios en prácticas tutorizados por ese catedrático. Si el catedrático no se encuentra, mostraremos el mensaje de "No se ha encontrado un catedrático con el DNI indicado". Si se encuentra, pero no tiene profesores asignados, mostraremos el mensaje de "El catedrático seleccionado no tiene profesores a su cargo".

3. Listado de profesores: se mostrarán los profesores existentes en el array, uno por línea, con el formato indicado por ToString. Los profesores catedráticos se mostrarán en azul y los que estén en prácticas en rojo. El resto se mostrará con los colores por defecto.

4. Estadísticas de catedráticos: se mostrará quién es el catedrático con más años de experiencia, por un lado, y quién es el que tiene más alumnos a su cargo, por otro.

5. Aprobar profesor en prácticas: mostraremos un listado con el DNI y nombre de los profesores en prácticas que aún no hayan superado la fase de prácticas. El usuario elegirá uno por DNI y, si es correcto, se le dará por aprobada dicha fase de prácticas. Si introduce un DNI que no exista o no se corresponda con un profesor en prácticas mostraremos el mensaje "DNI incorrecto".

0. Salir

Se valorará negativamente:

La repetición innecesaria de código en las clases hija por no utilizar adecuadamente la partícula base
La no modularidad de código en la clase principal para definir las distintas tareas a realizar

Para entregar:

Diagrama de clases del proyecto. Deberéis añadir en cada una sus atributos (con la visibilidad adecuada) y los métodos y constructores que se implementen en cada una. No es necesario añadir en el diagrama getters/setters o propiedades get/set.
Proyecto completo con las clases indicadas implementadas, junto con el programa principal

Deberás entregar el proyecto junto con el diagrama en un archivo llamado Practica_6_2.zip